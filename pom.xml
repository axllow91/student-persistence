<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>student-multi-app</groupId>
    <artifactId>students-manager</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>

    <!-- This pom is call  aggregator pom because is the parent pom; that implies we have modules inside of our project
    If this pom is going to add some dependencies that will mean all the modules will inherit all the dependencies that
    are in this parent pom-->
    <modules>
        <!--Here is a MVC design pattern
            we have module mode, service(controller) and ui(view)
            They are separated so the model could not interact with view
            The only way to interact is by creating a Controller class that
            will make the connection between them
        -->
        <!--It is easy to use this pom because if we want to build this modules
            we only need to navigate to the pom parent and run the mvn clean install
            because mvn will detect that the project has multiple modules and will build every module(one by one)
            and it's going to create a distinct jar file because we have specified in the pom that the packaging will
            be a jar file.
         -->

        <!-- if we want to include some jar from a module to another we only need to add it like a dependency -->
        <module>students-model</module>
        <module>students-service</module>
        <module>students-ui</module>
        <module>students-util</module>
    </modules>


</project>